version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: myshop_db
    # restart: always
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    environment: 
      # MYSQL_USER: root
      # MYSQL_RANDOM_ROOT_PASSWORD: root
      # MYSQL_PASSWORD: root
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: myshop
    command: --default-authentication-plugin=mysql_native_password
    # command: >
    #   sh -c mysql -h 127.0.0.1 -P 3307 -u root -p root
    networks:
      - app_network

  backend:
    image: node:18  # Use a Node.js image
    container_name: myshop_node_backend
    working_dir: /app
    volumes:
      - ./my-shop-nodejs:/app  # Mount your backend project directory
    ports:
      - "8080:8080"
    networks:
      - app_network
    depends_on:
      - mysql  # Ensure MySQL starts before Node.js
    environment:
      # - NODE_ENV=development
      - DB_HOST=mysql  # Use service name instead of 127.0.0.1
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=root
      - DB_NAME=myshop
    command: >
      sh -c "npm install --force && node server.js"
    # command: >
    #   sh -c "npm install -g nodemon && npm install --force && npm start"

  frontend:
    image: node:18  # Use a Node.js image for building Angular
    container_name: myshop_angular_frontend
    working_dir: /app
    volumes:
      - ./my-shop-ui:/app  # Mount your Angular project directory
    ports:
      - "4200:4200"
    networks:
      - app_network
    command: >
      sh -c "npm install --force && npm run start -- --host 0.0.0.0 --port 4200"
    environment:
      - CHOKIDAR_USEPOLLING=true  # Fix file watching issues inside Docker

networks:
  app_network:
    driver: bridge

volumes:
  mysql_data:
